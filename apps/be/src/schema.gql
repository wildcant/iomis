# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Menu {
  id: ID!
  deleted: Boolean!
  name: String!
  categories: [Category!]
}

type UnitType {
  id: ID!
  name: String!
  deleted: Boolean!
  ingredients: [Ingredient!]
}

type Ingredient {
  id: ID!
  deleted: Boolean!
  name: String!
  sku: String!
  unitTypeId: ID!
  unitCost: Float!
  visible: Boolean!
  barcode: String
  unitType: UnitType!
}

type ProductIngredient {
  id: ID!
  quantity: Int!
  productId: ID!
  product: Product!
  ingredientId: ID!
  ingredient: Ingredient!
}

type Tax {
  id: ID!
  deleted: Boolean!
  name: String!
  key: String!
  scope: ETaxScope!
  type: ETaxType!
  amount: Float!
  status: Boolean!
}

enum ETaxScope {
  SALES
  EMPLOYEES
  PURCHASES
  NONE
}

enum ETaxType {
  PERCENTAGE
  FIXED
}

type Product {
  id: ID!
  deleted: Boolean!
  archived: Boolean!
  categoryId: ID!
  category: Category!
  name: String!
  description: String
  plu: String!
  image: String
  color: String
  barcode: String
  productIngredients: [ProductIngredient!]!
  cost: Float!
  stock: Int!
  allowRefund: Boolean!
  taxes: [Tax]!
  price: Float!
  priceWithoutTaxes: Float!
}

type Category {
  id: ID!
  deleted: Boolean!
  name: String
  description: String
  taxes: [Tax]!
  course: Int
  image: String
  visible: Boolean
  products: [Product!]
  menus: [Menu!]
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type ProductConnection {
  totalCount: Float!
  pageInfo: PageInfo!
  nodes: [Product]!
}

type BatchResponse {
  count: Int!
}

type IngredientConnection {
  totalCount: Float!
  pageInfo: PageInfo!
  nodes: [Ingredient]!
}

type CategoryNodeCount {
  products: Int!
}

type CategoryNode {
  id: ID!
  deleted: Boolean!
  name: String
  description: String
  taxes: [Tax]!
  course: Int
  image: String
  visible: Boolean
  products: [Product!]
  menus: [Menu!]
  _count: CategoryNodeCount!
}

type CategoryConnection {
  totalCount: Float!
  pageInfo: PageInfo!
  nodes: [CategoryNode]!
}

type MenuConnection {
  totalCount: Float!
  pageInfo: PageInfo!
  nodes: [Menu]!
}

type UnitTypeConnection {
  totalCount: Float!
  pageInfo: PageInfo!
  nodes: [UnitType]!
}

type TaxConnection {
  totalCount: Float!
  pageInfo: PageInfo!
  nodes: [Tax]!
}

type Query {
  ingredients(offset: Int, limit: Int): IngredientConnection!
  ingredientsAll: [Ingredient!]!
  ingredient(id: ID!): Ingredient!
  productsAll(query: ProductsQueryArgs): [Product!]!
  products(offset: Int, limit: Int, query: ProductsQueryArgs): ProductConnection!
  product(id: ID!): Product!
  categories(offset: Int, limit: Int): CategoryConnection!
  categoriesAll(query: CategoriesQueryArgs): [CategoryNode!]!
  category(id: ID!): Category!
  menus(offset: Int, limit: Int): MenuConnection!
  menusAll: [Menu!]!
  menu(id: ID!): Menu!
  unitTypes(offset: Int, limit: Int): UnitTypeConnection!
  unitTypesAll: [UnitType!]!
  unitType(id: ID!): UnitType!
  taxes(offset: Int, limit: Int): TaxConnection!
  taxesAll: [Tax!]!
  tax(id: ID!): Tax!
}

input ProductsQueryArgs {
  archived: Boolean
  categoryId: ID
}

input CategoriesQueryArgs {
  menus: StringFilter
}

input StringFilter {
  equals: String
  in: [String]
}

type Mutation {
  ingredientCreate(input: IngredientCreateInput!): Ingredient!
  ingredientUpdate(id: ID!, input: IngredientUpdateInput!): Ingredient!
  ingredientDelete(id: ID!): Ingredient!
  productCreate(input: ProductCreateInput!): Product!
  productUpdate(id: ID!, input: ProductUpdateInput!): Product!
  productDelete(id: ID!): Product!
  productsArchiveBulk(query: ArchiveBulk!): BatchResponse!
  productsDeleteBulk(query: DeleteBulk!): BatchResponse!
  categoryCreate(input: CategoryCreateInput!): Category!
  categoryUpdate(id: ID!, input: CategoryUpdateInput!): Category!
  categoryDelete(id: ID!): Category!
  menuCreate(input: MenuCreateInput!): Menu!
  menuUpdate(id: ID!, input: MenuUpdateInput!): Menu!
  menuDelete(id: ID!): Menu!
  unitTypeCreate(input: UnitTypeCreateInput!): UnitType!
  unitTypeUpdate(id: ID!, input: UnitTypeUpdateInput!): UnitType!
  unitTypeDelete(id: ID!): UnitType!
  taxCreate(input: TaxCreateInput!): Tax!
  taxUpdate(id: ID!, input: TaxUpdateInput!): Tax!
  taxDelete(id: ID!): Tax!
}

input IngredientCreateInput {
  name: String!
  sku: String!
  unitTypeId: ID!
  unitCost: Float!
  visible: Boolean!
  barcode: String
}

input IngredientUpdateInput {
  name: String
  sku: String
  unitTypeId: ID
  unitCost: Float
  visible: Boolean
  barcode: String
}

input ProductCreateInput {
  archived: Boolean = false
  categoryId: ID!
  name: String!
  description: String
  plu: String!
  image: String
  color: String
  barcode: String
  cost: Float!
  stock: Int = 0
  allowRefund: Boolean = false
  price: Float!
  priceWithoutTaxes: Float!
  productIngredients: [ProductIngredientCreateInput!] = []
}

input ProductIngredientCreateInput {
  quantity: Int!
  ingredientId: ID!
}

input ProductUpdateInput {
  archived: Boolean = false
  categoryId: ID
  name: String
  description: String
  plu: String
  image: String
  color: String
  barcode: String
  cost: Float
  stock: Int = 0
  allowRefund: Boolean = false
  price: Float
  priceWithoutTaxes: Float
  productIngredients: [ProductIngredientCreateInput!] = []
}

input ArchiveBulk {
  id: StringFilter
  archived: Boolean = true
}

input DeleteBulk {
  id: StringFilter
}

input CategoryCreateInput {
  name: String
  description: String
  course: Int
  image: String
  visible: Boolean = false
  taxes: [ID]
}

input CategoryUpdateInput {
  name: String
  description: String
  course: Int
  image: String
  visible: Boolean = false
  taxes: [ID!]
}

input MenuCreateInput {
  name: String!
  categories: [ID]
}

input MenuUpdateInput {
  name: String
  categories: [ID!]
}

input UnitTypeCreateInput {
  name: String!
}

input UnitTypeUpdateInput {
  name: String
}

input TaxCreateInput {
  name: String!
  key: String!
  scope: ETaxScope!
  type: ETaxType!
  amount: Float!
  status: Boolean!
}

input TaxUpdateInput {
  name: String
  key: String
  scope: ETaxScope
  type: ETaxType
  amount: Float
  status: Boolean
}