generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id      String @id @default(cuid())
    title   String
    content String
}

model Company {
    id          String     @id @default(uuid()) @db.Uuid
    deleted     Boolean    @default(false)
    logo        String     @db.VarChar(255)
    website     String     @db.VarChar(255)
    phone       String     @db.VarChar(255)
    street      String     @db.VarChar(255)
    street2     String     @db.VarChar(255)
    city        String     @db.VarChar(255)
    state       String     @db.VarChar(255)
    zip         String     @db.VarChar(255)
    contact     Contact[]
    ingredients Supplier[]
}

enum EContactType {
    CONTACT
    INVOICE
    DELIVERY
    OTHER
    PRIVATE
}

model Contact {
    id        String       @id @default(uuid()) @db.Uuid
    deleted   Boolean      @default(false)
    type      EContactType @default(CONTACT)
    companyId String       @db.Uuid
    company   Company      @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "contact_companyid_foreign")
}

model Product {
    id       String  @id @default(uuid()) @db.Uuid
    deleted  Boolean @default(false)
    archived Boolean @default(false)

    // *** Basic ***
    categoryId  String   @db.Uuid
    category    Category @relation(fields: [categoryId], references: [id])
    name        String   @db.VarChar(255)
    description String?  @db.VarChar(255)
    plu         String   @db.VarChar(255)
    image       String?  @db.VarChar(255)
    color       String?
    // productTypeId

    // *** Inventory ***
    barcode            String?             @db.VarChar(255)
    productIngredients ProductIngredient[]
    cost               Float?
    stock              Int
    allowRefund        Boolean             @default(false)
    // trackStock

    // *** Taxes ***
    vat Int?
    // deliveryVat String?
    // takeawayVat String?

    // *** Pricing ***
    price           Float
    priceWithoutVAT Float
    // deliveryPrice
    // deliveryPriceWithoutVAT
    // takeawayPriceWithoutVAT

    // *** Others ***
    // tags   String[]
    OrderLine OrderLine[]
}

model ProductIngredient {
    id           String     @id @default(uuid()) @db.Uuid
    quantity     Int
    ingredientId String     @db.Uuid
    productId    String     @db.Uuid
    ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
    product      Product    @relation(fields: [productId], references: [id])
}

model Category {
    id          String    @id @default(uuid()) @db.Uuid
    deleted     Boolean   @default(false)
    name        String    @db.VarChar(255)
    description String?
    vat         String?
    deliveryVat String?
    takeawayVat String?
    course      Int?
    image       String?   @db.VarChar(255)
    visible     Boolean   @default(false)
    // printer
    // printTemplateId String              @db.Uuid
    // printTemplateIds PrintTemplate[]
    // printOrder      Int?
    // notificationTemplateIds NotificationTemplate[]
    // moddifiers      Modiffier[]
    // companyId    Company?
    // type         String?
    products    Product[]
    menus       Menu[]
}

model Supplier {
    id           String     @id @default(uuid()) @db.Uuid
    companyId    String     @db.Uuid
    ingredientId String     @db.Uuid
    company      Company    @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "supplier_companyid_foreign")
    ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "supplier_productid_foreign")
}

model Menu {
    id         String     @id @default(uuid()) @db.Uuid
    deleted    Boolean    @default(false)
    name       String     @db.VarChar(255)
    categories Category[]
}

model Ingredient {
    id                String              @id @default(uuid()) @db.Uuid
    deleted           Boolean             @default(false)
    name              String              @db.VarChar(255)
    sku               String              @db.VarChar(255)
    unitTypeId        String              @db.Uuid
    unitCost          Float?
    visible           Boolean             @default(false)
    barcode           String?
    unitType          UnitType            @relation(fields: [unitTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ingredientunittype_unitypeid_foreign")
    suppliers         Supplier[]
    ProductIngredient ProductIngredient[]
}

model UnitType {
    id         String       @id @default(uuid()) @db.Uuid
    deleted    Boolean      @default(false)
    name       String       @db.VarChar(255)
    Ingredient Ingredient[]
}

enum EOrderState {
    DRAFT
    CANCELLED
    PAID
    DONE
    INVOICED
}

model Order {
    id           String      @id @default(uuid()) @db.Uuid
    createdAt    DateTime
    amountTax    Float
    amountTotal  Float
    amountPaid   Float
    amountReturn Float
    lines        OrderLine[]
    state        EOrderState
}

model OrderLine {
    id            String  @id @default(uuid()) @db.Uuid
    quantity      Int
    priceSubtotal Float
    product       Product @relation(fields: [productId], references: [id])
    productId     String  @db.Uuid
    Order         Order?  @relation(fields: [orderId], references: [id])
    orderId       String? @db.Uuid
}

enum EInvoiceType {
    CUSTOMER_INVOICE
    SUPPLIER_INVOICE
    CUSTOMER_REFUND
    SUPPLIER_REFUND
}

enum EState {
    DRAFT
    OPEN
    PAID
    CANCELLED
}

model Invoice {
    id          String       @id @default(uuid()) @db.Uuid
    description String
    type        EInvoiceType
}
